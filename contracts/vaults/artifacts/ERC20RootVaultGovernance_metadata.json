{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract IProtocolGovernance",
								"name": "protocolGovernance",
								"type": "address"
							},
							{
								"internalType": "contract IVaultRegistry",
								"name": "registry",
								"type": "address"
							},
							{
								"internalType": "contract IVault",
								"name": "singleton",
								"type": "address"
							}
						],
						"internalType": "struct IVaultGovernance.InternalParams",
						"name": "internalParams_",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "managementFeeChargeDelay",
								"type": "uint256"
							},
							{
								"internalType": "contract IOracle",
								"name": "oracle",
								"type": "address"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
						"name": "delayedProtocolParams_",
						"type": "tuple"
					},
					{
						"internalType": "contract IERC20RootVaultHelper",
						"name": "helper_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "managementFeeChargeDelay",
								"type": "uint256"
							},
							{
								"internalType": "contract IOracle",
								"name": "oracle",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "CommitDelayedProtocolParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "protocolFee",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "CommitDelayedProtocolPerVaultParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "strategyTreasury",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "strategyPerformanceTreasury",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "privateVault",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "managementFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "performanceFee",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "depositCallbackAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "withdrawCallbackAddress",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "CommitDelayedStrategyParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "contract IProtocolGovernance",
								"name": "protocolGovernance",
								"type": "address"
							},
							{
								"internalType": "contract IVaultRegistry",
								"name": "registry",
								"type": "address"
							},
							{
								"internalType": "contract IVault",
								"name": "singleton",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct IVaultGovernance.InternalParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "CommitedInternalParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "vaultTokens",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "options",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "vaultAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "vaultNft",
						"type": "uint256"
					}
				],
				"name": "DeployedVault",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "bool",
								"name": "disableDeposit",
								"type": "bool"
							}
						],
						"indexed": false,
						"internalType": "struct IERC20RootVaultGovernance.OperatorParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "SetOperatorParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenLimitPerAddress",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenLimit",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct IERC20RootVaultGovernance.StrategyParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "SetStrategyParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "managementFeeChargeDelay",
								"type": "uint256"
							},
							{
								"internalType": "contract IOracle",
								"name": "oracle",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
						"name": "params",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "when",
						"type": "uint256"
					}
				],
				"name": "StageDelayedProtocolParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "protocolFee",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
						"name": "params",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "when",
						"type": "uint256"
					}
				],
				"name": "StageDelayedProtocolPerVaultParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "strategyTreasury",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "strategyPerformanceTreasury",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "privateVault",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "managementFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "performanceFee",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "depositCallbackAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "withdrawCallbackAddress",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
						"name": "params",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "when",
						"type": "uint256"
					}
				],
				"name": "StageDelayedStrategyParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "origin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "contract IProtocolGovernance",
								"name": "protocolGovernance",
								"type": "address"
							},
							{
								"internalType": "contract IVaultRegistry",
								"name": "registry",
								"type": "address"
							},
							{
								"internalType": "contract IVault",
								"name": "singleton",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct IVaultGovernance.InternalParams",
						"name": "params",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "when",
						"type": "uint256"
					}
				],
				"name": "StagedInternalParams",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MAX_MANAGEMENT_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_PERFORMANCE_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_PROTOCOL_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "commitDelayedProtocolParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "commitDelayedProtocolPerVaultParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "commitDelayedStrategyParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "commitInternalParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractName",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractNameBytes",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractVersion",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractVersionBytes",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "vaultTokens_",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "strategy_",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "subvaultNfts_",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					}
				],
				"name": "createVault",
				"outputs": [
					{
						"internalType": "contract IERC20RootVault",
						"name": "vault",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "delayedProtocolParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "managementFeeChargeDelay",
								"type": "uint256"
							},
							{
								"internalType": "contract IOracle",
								"name": "oracle",
								"type": "address"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "delayedProtocolParamsTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "delayedProtocolPerVaultParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "protocolFee",
								"type": "uint256"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "delayedProtocolPerVaultParamsTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "delayedStrategyParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "strategyTreasury",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "strategyPerformanceTreasury",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "privateVault",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "managementFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "performanceFee",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "depositCallbackAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "withdrawCallbackAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "delayedStrategyParamsTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "helper",
				"outputs": [
					{
						"internalType": "contract IERC20RootVaultHelper",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "internalParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "contract IProtocolGovernance",
								"name": "protocolGovernance",
								"type": "address"
							},
							{
								"internalType": "contract IVaultRegistry",
								"name": "registry",
								"type": "address"
							},
							{
								"internalType": "contract IVault",
								"name": "singleton",
								"type": "address"
							}
						],
						"internalType": "struct IVaultGovernance.InternalParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "internalParamsTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "operatorParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bool",
								"name": "disableDeposit",
								"type": "bool"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.OperatorParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bool",
								"name": "disableDeposit",
								"type": "bool"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.OperatorParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "setOperatorParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenLimitPerAddress",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenLimit",
								"type": "uint256"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.StrategyParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "setStrategyParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "managementFeeChargeDelay",
								"type": "uint256"
							},
							{
								"internalType": "contract IOracle",
								"name": "oracle",
								"type": "address"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "stageDelayedProtocolParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "protocolFee",
								"type": "uint256"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "stageDelayedProtocolPerVaultParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "strategyTreasury",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "strategyPerformanceTreasury",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "privateVault",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "managementFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "performanceFee",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "depositCallbackAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "withdrawCallbackAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "stageDelayedStrategyParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract IProtocolGovernance",
								"name": "protocolGovernance",
								"type": "address"
							},
							{
								"internalType": "contract IVaultRegistry",
								"name": "registry",
								"type": "address"
							},
							{
								"internalType": "contract IVault",
								"name": "singleton",
								"type": "address"
							}
						],
						"internalType": "struct IVaultGovernance.InternalParams",
						"name": "newParams",
						"type": "tuple"
					}
				],
				"name": "stageInternalParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stagedDelayedProtocolParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "managementFeeChargeDelay",
								"type": "uint256"
							},
							{
								"internalType": "contract IOracle",
								"name": "oracle",
								"type": "address"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "stagedDelayedProtocolPerVaultParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "protocolFee",
								"type": "uint256"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "stagedDelayedStrategyParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "strategyTreasury",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "strategyPerformanceTreasury",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "privateVault",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "managementFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "performanceFee",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "depositCallbackAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "withdrawCallbackAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stagedInternalParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "contract IProtocolGovernance",
								"name": "protocolGovernance",
								"type": "address"
							},
							{
								"internalType": "contract IVaultRegistry",
								"name": "registry",
								"type": "address"
							},
							{
								"internalType": "contract IVault",
								"name": "singleton",
								"type": "address"
							}
						],
						"internalType": "struct IVaultGovernance.InternalParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nft",
						"type": "uint256"
					}
				],
				"name": "strategyParams",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenLimitPerAddress",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenLimit",
								"type": "uint256"
							}
						],
						"internalType": "struct IERC20RootVaultGovernance.StrategyParams",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"CommitDelayedProtocolParams(address,address,(uint256,address))": {
					"params": {
						"origin": "Origin of the transaction (tx.origin)",
						"params": "New params that are committed",
						"sender": "Sender of the call (msg.sender)"
					}
				},
				"CommitDelayedProtocolPerVaultParams(address,address,uint256,(uint256))": {
					"params": {
						"nft": "VaultRegistry NFT of the vault",
						"origin": "Origin of the transaction (tx.origin)",
						"params": "New params that are committed",
						"sender": "Sender of the call (msg.sender)"
					}
				},
				"CommitDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address))": {
					"params": {
						"nft": "VaultRegistry NFT of the vault",
						"origin": "Origin of the transaction (tx.origin)",
						"params": "New params that are committed",
						"sender": "Sender of the call (msg.sender)"
					}
				},
				"SetOperatorParams(address,address,(bool))": {
					"params": {
						"origin": "Origin of the transaction (tx.origin)",
						"params": "New params that are set",
						"sender": "Sender of the call (msg.sender)"
					}
				},
				"SetStrategyParams(address,address,uint256,(uint256,uint256))": {
					"params": {
						"nft": "VaultRegistry NFT of the vault",
						"origin": "Origin of the transaction (tx.origin)",
						"params": "New params that are set",
						"sender": "Sender of the call (msg.sender)"
					}
				},
				"StageDelayedProtocolParams(address,address,(uint256,address),uint256)": {
					"params": {
						"origin": "Origin of the transaction (tx.origin)",
						"params": "New params that were staged for commit",
						"sender": "Sender of the call (msg.sender)",
						"when": "When the params could be committed"
					}
				},
				"StageDelayedProtocolPerVaultParams(address,address,uint256,(uint256),uint256)": {
					"params": {
						"nft": "VaultRegistry NFT of the vault",
						"origin": "Origin of the transaction (tx.origin)",
						"params": "New params that were staged for commit",
						"sender": "Sender of the call (msg.sender)",
						"when": "When the params could be committed"
					}
				},
				"StageDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address),uint256)": {
					"params": {
						"nft": "VaultRegistry NFT of the vault",
						"origin": "Origin of the transaction (tx.origin)",
						"params": "New params that were staged for commit",
						"sender": "Sender of the call (msg.sender)",
						"when": "When the params could be committed"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"commitDelayedProtocolPerVaultParams(uint256)": {
					"details": "Can only be called after delayedProtocolPerVaultParamsTimestamp",
					"params": {
						"nft": "VaultRegistry NFT of the vault"
					}
				},
				"commitDelayedStrategyParams(uint256)": {
					"details": "Can only be called after delayedStrategyParamsTimestamp",
					"params": {
						"nft": "VaultRegistry NFT of the vault"
					}
				},
				"constructor": {
					"params": {
						"delayedProtocolParams_": "Initial Protocol Params",
						"internalParams_": "Initial Internal Params"
					}
				},
				"createVault(address[],address,uint256[],address)": {
					"params": {
						"owner_": "Owner of the vault NFT",
						"strategy_": "The address that will have approvals for subvaultNfts",
						"subvaultNfts_": "The NFTs of the subvaults that will be aggregated by this ERC20RootVault",
						"vaultTokens_": "ERC20 tokens that will be managed by this Vault"
					}
				},
				"delayedProtocolPerVaultParams(uint256)": {
					"params": {
						"nft": "VaultRegistry NFT of the vault"
					}
				},
				"delayedProtocolPerVaultParamsTimestamp(uint256)": {
					"params": {
						"nft": "Nft of the vault"
					}
				},
				"delayedStrategyParams(uint256)": {
					"params": {
						"nft": "VaultRegistry NFT of the vault"
					}
				},
				"delayedStrategyParamsTimestamp(uint256)": {
					"params": {
						"nft": "Nft of the vault"
					}
				},
				"setOperatorParams((bool))": {
					"params": {
						"params": "New params"
					}
				},
				"setStrategyParams(uint256,(uint256,uint256))": {
					"params": {
						"nft": "Nft of the vault",
						"params": "New params"
					}
				},
				"stageDelayedProtocolParams((uint256,address))": {
					"details": "Can only be called after delayedProtocolParamsTimestamp.",
					"params": {
						"params": "New params"
					}
				},
				"stageDelayedProtocolPerVaultParams(uint256,(uint256))": {
					"params": {
						"nft": "VaultRegistry NFT of the vault",
						"params": "New params"
					}
				},
				"stageDelayedStrategyParams(uint256,(address,address,bool,uint256,uint256,address,address))": {
					"params": {
						"nft": "VaultRegistry NFT of the vault",
						"params": "New params"
					}
				},
				"stageInternalParams((address,address,address))": {
					"params": {
						"newParams": "New Internal Params"
					}
				},
				"stagedDelayedProtocolPerVaultParams(uint256)": {
					"params": {
						"nft": "VaultRegistry NFT of the vault"
					}
				},
				"stagedDelayedStrategyParams(uint256)": {
					"params": {
						"nft": "VaultRegistry NFT of the vault"
					}
				},
				"stagedInternalParams()": {
					"details": "The Internal Params could be committed after internalParamsTimestamp"
				},
				"strategyParams(uint256)": {
					"params": {
						"nft": "VaultRegistry NFT of the vault"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"CommitDelayedProtocolParams(address,address,(uint256,address))": {
					"notice": "Emitted when new DelayedProtocolParams are committed"
				},
				"CommitDelayedProtocolPerVaultParams(address,address,uint256,(uint256))": {
					"notice": "Emitted when new DelayedProtocolPerVaultParams are committed"
				},
				"CommitDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address))": {
					"notice": "Emitted when new DelayedStrategyParams are committed"
				},
				"CommitedInternalParams(address,address,(address,address,address))": {
					"notice": "Emitted when InternalParams are staged for commit"
				},
				"DeployedVault(address,address,address[],bytes,address,address,uint256)": {
					"notice": "Emitted when New Vault is deployed"
				},
				"SetOperatorParams(address,address,(bool))": {
					"notice": "Emitted when new OperatorParams are set."
				},
				"SetStrategyParams(address,address,uint256,(uint256,uint256))": {
					"notice": "Emitted when new StrategyParams are set."
				},
				"StageDelayedProtocolParams(address,address,(uint256,address),uint256)": {
					"notice": "Emitted when new DelayedProtocolParams are staged for commit"
				},
				"StageDelayedProtocolPerVaultParams(address,address,uint256,(uint256),uint256)": {
					"notice": "Emitted when new DelayedProtocolPerVaultParams are staged for commit"
				},
				"StageDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address),uint256)": {
					"notice": "Emitted when new DelayedStrategyParams are staged for commit"
				},
				"StagedInternalParams(address,address,(address,address,address),uint256)": {
					"notice": "Emitted when InternalParams are staged for commit"
				}
			},
			"kind": "user",
			"methods": {
				"MAX_MANAGEMENT_FEE()": {
					"notice": "Number of maximum management fee"
				},
				"MAX_PERFORMANCE_FEE()": {
					"notice": "Number of maximum performance fee"
				},
				"MAX_PROTOCOL_FEE()": {
					"notice": "Number of maximum protocol fee"
				},
				"commitDelayedProtocolParams()": {
					"notice": "Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
				},
				"commitDelayedProtocolPerVaultParams(uint256)": {
					"notice": "Commit Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
				},
				"commitDelayedStrategyParams(uint256)": {
					"notice": "Commit Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay."
				},
				"commitInternalParams()": {
					"notice": "Commit staged Internal Params."
				},
				"constructor": {
					"notice": "Creates a new contract."
				},
				"createVault(address[],address,uint256[],address)": {
					"notice": "Deploys a new vault."
				},
				"delayedProtocolParams()": {
					"notice": "Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
				},
				"delayedProtocolParamsTimestamp()": {
					"notice": "Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed."
				},
				"delayedProtocolPerVaultParams(uint256)": {
					"notice": "Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
				},
				"delayedProtocolPerVaultParamsTimestamp(uint256)": {
					"notice": "Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed."
				},
				"delayedStrategyParams(uint256)": {
					"notice": "Delayed Strategy Params"
				},
				"delayedStrategyParamsTimestamp(uint256)": {
					"notice": "Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed."
				},
				"internalParams()": {
					"notice": "Internal Params of the contract."
				},
				"internalParamsTimestamp()": {
					"notice": "Timestamp in unix time seconds after which staged Internal Params could be committed."
				},
				"operatorParams()": {
					"notice": "Operator Params."
				},
				"setOperatorParams((bool))": {
					"notice": "Set Operator params, i.e. Params that could be changed by Operator or Protocol Governance immediately."
				},
				"setStrategyParams(uint256,(uint256,uint256))": {
					"notice": "Set Strategy params, i.e. Params that could be changed by Strategy or Protocol Governance immediately."
				},
				"stageDelayedProtocolParams((uint256,address))": {
					"notice": "Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
				},
				"stageDelayedProtocolPerVaultParams(uint256,(uint256))": {
					"notice": "Stage Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
				},
				"stageDelayedStrategyParams(uint256,(address,address,bool,uint256,uint256,address,address))": {
					"notice": "Stage Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay."
				},
				"stageInternalParams((address,address,address))": {
					"notice": "Stage new Internal Params."
				},
				"stagedDelayedProtocolParams()": {
					"notice": "Delayed Protocol Params staged for commit after delay."
				},
				"stagedDelayedProtocolPerVaultParams(uint256)": {
					"notice": "Delayed Protocol Per Vault Params staged for commit after delay."
				},
				"stagedDelayedStrategyParams(uint256)": {
					"notice": "Delayed Strategy Params staged for commit after delay."
				},
				"stagedInternalParams()": {
					"notice": "Staged new Internal Params."
				},
				"strategyParams(uint256)": {
					"notice": "Strategy Params."
				}
			},
			"notice": "Governance that manages all Lp Issuers params and can deploy a new LpIssuer Vault.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/vaults/ERC20RootVaultGovernance.sol": "ERC20RootVaultGovernance"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b",
			"license": "MIT",
			"urls": [
				"bzz-raw://1e7e0a870c4c25c619d8cef3c646ac78b9e9d4ac15d50f8f2b6729bd04cae47c",
				"dweb:/ipfs/QmNj6rGpNzq6HDnfyBNr8joZCGm23M5kWHAhYfg3BwN7JF"
			]
		},
		"@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
			"keccak256": "0x3c3ef4fb25def71f5f18af554ca938950eb9cf218fda073ed2c69b9203c03455",
			"license": "MIT",
			"urls": [
				"bzz-raw://8083924ad8ee40a1254bb235c59360165b3cac1bc1e9bfd926beecc50c75cffd",
				"dweb:/ipfs/Qme9trL3Q7GAP2B18XAg1DynP1EyQ2K1GcM6MwWgKM97p5"
			]
		},
		"@openzeppelin/contracts/proxy/Clones.sol": {
			"keccak256": "0xb0ff3f5c37c94cfa0da555a4c7d9034c46d70d0479917bed63612a9fc7092672",
			"license": "MIT",
			"urls": [
				"bzz-raw://3d92b14d2421dde24a46c0b0bf71e0fd992d704c3930fbdda0cbd63ac139f801",
				"dweb:/ipfs/QmUxyqzwRvHLtsosLRh7i3CynAaojXfRJYcE1aBmeUeWrd"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7",
			"license": "MIT",
			"urls": [
				"bzz-raw://4cb252ec7657ba7a91be688cbd263090aa5379e504f488a62d06198e0d630322",
				"dweb:/ipfs/QmW56fDiDirhWfWiKrycXE5UY6tTNtFrYx39ipnSs8mkYb"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://497017741d74878b56a67ad51e98061bd9ec0e6e4fdbfef0e2ab51523f4c16de",
				"dweb:/ipfs/QmWfkpRHksy8jFywqYxdmMqdkQ1hxrGTPoNBXbZ48zTvyv"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dd1601fcd370546d8c06ea1902d7e7364fc490fbf0ebc3004230ef1f5db473c",
				"dweb:/ipfs/Qmb8zbC3TjWFtcuyP3KEEaegMkPcfeKAcPrwzvkAoMR3cZ"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9",
			"license": "MIT",
			"urls": [
				"bzz-raw://100f8d367b5e94eb9cb991914f1de133cf272654c0708faa893bbc17a5b35b93",
				"dweb:/ipfs/QmZeBojmgXq821dL1TJKFb58B1FogM9jL3u7hXQ8hTEBKT"
			]
		},
		"contracts/interfaces/IProtocolGovernance.sol": {
			"keccak256": "0xda6b37c257d780a870b289b4e44badc6afb7f2301f500a440c4c020abedd98e6",
			"license": "MIT",
			"urls": [
				"bzz-raw://93ce78b05dd9bdaea807380cd44e220c217ee4bb27f311993f28ea27c82fd215",
				"dweb:/ipfs/QmcxSoA8MBtwt1FFGVcGo4LCzCSUAB3jfX5TkiafAVQbqx"
			]
		},
		"contracts/interfaces/IUnitPricesGovernance.sol": {
			"keccak256": "0x300050e0de7d02134592f130cdb90752dc8fcea6cab2e58eb9dafd3a7e3f4e5f",
			"license": "MIT",
			"urls": [
				"bzz-raw://1065d39058393c0da9550a424a34e2832882a530e4ddce33f5ddd17bd2d56a72",
				"dweb:/ipfs/QmX1zjA1as8jxrvZCwTyGPVAkCyh7Gg6G89757aJLoGC47"
			]
		},
		"contracts/interfaces/IVaultRegistry.sol": {
			"keccak256": "0x66ba86bbbe472a039ab45b556eb235c9ed64ea0d43de4f22fdf64b9b41e3f4ca",
			"license": "MIT",
			"urls": [
				"bzz-raw://f8fb21d42fb95e7f8df33c227ae1b2363c7d86288f8d88a076c0163f28c2687e",
				"dweb:/ipfs/QmQboWcs8qDG1kqjoKr5QAVa6oWCHagGoYxcsmNbgYhka3"
			]
		},
		"contracts/interfaces/external/erc/IERC1271.sol": {
			"keccak256": "0x2081de4db31bc623043b8305bf55c676c55250a3b51deb293281d97f1ca7e9c9",
			"license": "MIT",
			"urls": [
				"bzz-raw://712dbbd43245e0bb9ca5573170507fabb506ffe7610dc39f13b4716220479fba",
				"dweb:/ipfs/QmZybwDeFoWpzkZEmMxqPA6Jx1fn8P5ygVHSDFk4uM7xS7"
			]
		},
		"contracts/interfaces/oracles/IOracle.sol": {
			"keccak256": "0x4629a653a356248a9683d6e02a6fb738802b60086b1cb8cdbfa05385f1914b5e",
			"license": "MIT",
			"urls": [
				"bzz-raw://5b733f94000de360f16dd43a6ef2ad51c42f03520f7c6827919922de5d0e1149",
				"dweb:/ipfs/QmZsdkkSrjG5cViQF5qxmU9wvnLmLKgyBvANRhTYTPaisJ"
			]
		},
		"contracts/interfaces/utils/IContractMeta.sol": {
			"keccak256": "0x71ab67daf730f37610ce5964dda62744edb347fa5b12210f9bb7c9239ff66e2a",
			"license": "MIT",
			"urls": [
				"bzz-raw://e6f38640781fbb7476777544c34457723765be302d0b208a7e841a6361967812",
				"dweb:/ipfs/QmRKa7A3FZJvjrJwZnhKUuddfdH7J7HuRTQBbdfBwiU4rU"
			]
		},
		"contracts/interfaces/utils/IDefaultAccessControl.sol": {
			"keccak256": "0x847c664c3e293a19109ec872e341f254a86c6f93548cea827f4e8a485cf994cd",
			"license": "MIT",
			"urls": [
				"bzz-raw://95fc19492725d54c1792afc736ec501a1f3a46975ecf584bfd3c0bfd83b140eb",
				"dweb:/ipfs/QmXnawUkM3xxj2ytaTaekvj8FB3JeoiTrrBazhYg47wjSc"
			]
		},
		"contracts/interfaces/utils/IERC20RootVaultHelper.sol": {
			"keccak256": "0x2b3943703b9d7a07ece1cb6baf4d3286628ba8bf2dd3ddb8716e037cd4af7e09",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c7003631c5915716a58e67e3e4b2f880eb243f91b4dc58bebc5bfde7c15f8b0",
				"dweb:/ipfs/QmTAdntNqnsW48DYGHtySZFKgeZqS1H8bMtx32eCkkr9zr"
			]
		},
		"contracts/interfaces/vaults/IAggregateVault.sol": {
			"keccak256": "0x6612cee9ee47f2684b8d75ed1fdfe871e2d415bdae13f69637a57db30fbfe68f",
			"license": "MIT",
			"urls": [
				"bzz-raw://2453265044169bdb84706c3c60056833635f393d1a272d5f3c4b4cbea7f3580a",
				"dweb:/ipfs/QmbPJrzx6YBATjaAop1F9UtjgG4c2Fm1qrm3bLABdynGg5"
			]
		},
		"contracts/interfaces/vaults/IERC20RootVault.sol": {
			"keccak256": "0x9aa1a58d5e06005744ca0b37bd9ad7b9175b1d98c5851129378f95a0cbcb6ac0",
			"license": "MIT",
			"urls": [
				"bzz-raw://92b68042738722d0d279cddaba03f317fafab9507939a791ebc3d3562bfbd8ca",
				"dweb:/ipfs/QmdzRPxCxeamnCWTuE957fuBg4zVFGQyuATW3WoLrGCkLJ"
			]
		},
		"contracts/interfaces/vaults/IERC20RootVaultGovernance.sol": {
			"keccak256": "0x1ee3664c8bdba0ac9c0559f3777ce91a026bda64e3d557912a8ebe0a04f70a5e",
			"license": "MIT",
			"urls": [
				"bzz-raw://0847bbeabbfeb50b04b52170b407d5cda2c0d065df044d2ea21258efad96f87a",
				"dweb:/ipfs/QmNVBXaFhu3orvJ2jLL34PDW4pBgLNNEiAArF2VZKWShNm"
			]
		},
		"contracts/interfaces/vaults/IERC20Vault.sol": {
			"keccak256": "0x2257bbf574ddb540da98a2768bdd98a93b244af4ca87f1042cb288e02653d18d",
			"license": "MIT",
			"urls": [
				"bzz-raw://88cc49bd616905b2e9e5aa9964e3c46e24abf0a041240b85944a49f9bdb168c2",
				"dweb:/ipfs/QmWwctN62qUSKJsJ5hSgELyzGjyL2tunkd9m4cs96G7qUb"
			]
		},
		"contracts/interfaces/vaults/IIntegrationVault.sol": {
			"keccak256": "0xad9b4303b547c9304e51078cffc69552de4308a30036b1d07cc02a05ce5476d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6ddd09b0d3b58bb44b45555f2a363db98e93016cae4518511c4d3e68736b30b5",
				"dweb:/ipfs/QmYME2tp5jr9G5JhCALziJqPLysB7tgAUTkVE7rtkydA5E"
			]
		},
		"contracts/interfaces/vaults/IVault.sol": {
			"keccak256": "0x9e74850f8f3ecd6eab0f6b1adaad960c443b14c128007a77260d2bb6bcb686d5",
			"license": "MIT",
			"urls": [
				"bzz-raw://87c2e0bdacc0a3fe9825f07a2de8ece41a6cc477872b10bd2b083400a13f4b8e",
				"dweb:/ipfs/QmWWvR4uQY7rXboGbVBEnDH9QvTRJW9pSmSoPq8f9p8JgT"
			]
		},
		"contracts/interfaces/vaults/IVaultGovernance.sol": {
			"keccak256": "0xa5b24cd080393cb094d7887bbdc04fb4361fde90280e8bf9856428b6b6ebd90d",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6ce19e4c8a5b788963f895c6ebde1c84a294a284e76d9733d9bf89f75d2eca2",
				"dweb:/ipfs/QmWFXkhuaaCr3VaRaKSe12hs6DKeebQhDUqAd4z6TeByJq"
			]
		},
		"contracts/interfaces/vaults/IVaultRoot.sol": {
			"keccak256": "0xe519cf0fe904e58fe52eb040d3d1ff6faf8ccbb143dcab784d0a3a28362e9a4f",
			"license": "MIT",
			"urls": [
				"bzz-raw://7572294ceade17c2169f0e04930cd3283e420b2b938ec72d8663af590cdd7af6",
				"dweb:/ipfs/QmPQjUiEvuB3iW6hm686oyT4vNNMpxXdEBroX3iiNLa7Bx"
			]
		},
		"contracts/libraries/ExceptionsLibrary.sol": {
			"keccak256": "0x9d3c5dbb4f630168c4c2dc8954dfefd3160632c3253ac7d9fab740db83a8debe",
			"license": "MIT",
			"urls": [
				"bzz-raw://fd0f1054e7ebc130cb46db7da57a16a350699020ab2e31b453677be318aaab72",
				"dweb:/ipfs/QmbNiK1uTZmhvaN9KeCvEXiKnERcaU6fxAnKPGMbUmqk9r"
			]
		},
		"contracts/libraries/PermissionIdsLibrary.sol": {
			"keccak256": "0x8f78667de19682976b7b5f2f13eac15d2344a0387164e819895d363e19c6058c",
			"license": "MIT",
			"urls": [
				"bzz-raw://e94cb83c512a6dce844323b3b448fc129ae12f80305567193d472d26e852c9de",
				"dweb:/ipfs/QmUo5NYGfQPUGphL5LSTzfqtG4Gpn5JSH5SF8yy8hbv1Ha"
			]
		},
		"contracts/utils/ContractMeta.sol": {
			"keccak256": "0x4fbcc859f5a0e284485afbd6dd6ec95010dfa08cc278f50c884f5d8f8add3682",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://4c7adf6e64fb38c9d1a19ad1c32e95358930f542b52ed02558b8fddc1440a45c",
				"dweb:/ipfs/QmZ8sj3pL6WCasw1evkHNNQu9bwCfBYzKhVy43XU6Qwqdy"
			]
		},
		"contracts/vaults/ERC20RootVaultGovernance.sol": {
			"keccak256": "0xe9e3706205e549cd78fb9d860edf2afaa1c5db244ef9421033e71b8230e7d59c",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://9fd4cbe68c7a1de62cc0a41888400c7f74613b8b082b18b2891bc18338144ed8",
				"dweb:/ipfs/QmWc74cp2xFfPXSyuPqJdHMzsU4A4oUeqVBKi8RpLhhp7J"
			]
		},
		"contracts/vaults/VaultGovernance.sol": {
			"keccak256": "0x6c28cb23d4c00f119e8b1e2fe8c8c440160ccab9391120396bdbb1611c1a8b2c",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://ffb6e278d062c1ea7e53f14c6ca3e96cc263e3b42fe624072baa729841ecd888",
				"dweb:/ipfs/QmUN7c3buqgS5umRnpfP57SHXyeJDbmNEHUHd5mJfPs5Cz"
			]
		}
	},
	"version": 1
}